From 45e7d1e8f812c57302d375ebf735c75baa802019 Mon Sep 17 00:00:00 2001
From: Andy Fingerhut <andy_fingerhut@alum.wustl.edu>
Date: Mon, 26 Mar 2012 14:58:56 -0700
Subject: [PATCH] CLJ-881: exception when cl-format is given some ~f
 directive/value combinations

---
 src/clj/clojure/pprint/cl_format.clj               |   22 +++++++++++++++-----
 .../clojure/test_clojure/pprint/test_cl_format.clj |    4 ++++
 2 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/src/clj/clojure/pprint/cl_format.clj b/src/clj/clojure/pprint/cl_format.clj
index ef5c981..74cd33b 100644
--- a/src/clj/clojure/pprint/cl_format.clj
+++ b/src/clj/clojure/pprint/cl_format.clj
@@ -564,6 +564,22 @@ Note this should only be used for the last one in the sequence"
       ["0" 0]
       [m2 (- (Integer/valueOf e) delta)])))
 
+(defn- ^String inc-s
+  "Assumption: The input string consists of one or more decimal digits,
+and no other characters.  Return a string containing one or more
+decimal digits containing a decimal number one larger than the input
+string.  The output string will always be the same length as the input
+string, or one character longer."
+  [^String s]
+  (let [len-1 (dec (count s))]
+    (loop [i (int len-1)]
+      (cond
+       (neg? i) (apply str "1" (repeat (inc len-1) "0"))
+       (= \9 (.charAt s i)) (recur (dec i))
+       :else (apply str (subs s 0 i)
+                    (char (inc (int (.charAt s i))))
+                    (repeat (- len-1 i) "0"))))))
+
 (defn- round-str [m e d w]
   (if (or d w)
     (let [len (count m)
@@ -582,11 +598,7 @@ Note this should only be used for the last one in the sequence"
             (let [round-char (nth m1 round-pos)
                   ^String result (subs m1 0 round-pos)]
               (if (>= (int round-char) (int \5))
-                (let [result-val (Integer/valueOf result)
-                      leading-zeros (subs result 0 (min (prefix-count result \0) (- round-pos 1)))
-                      round-up-result (str leading-zeros
-                                           (String/valueOf (+ result-val 
-                                                              (if (neg? result-val) -1 1))))
+                (let [round-up-result (inc-s result)
                       expanded (> (count round-up-result) (count result))]
                   [round-up-result e1 expanded])
                 [result e1 false]))
diff --git a/test/clojure/test_clojure/pprint/test_cl_format.clj b/test/clojure/test_clojure/pprint/test_cl_format.clj
index 8a95104..62fa685 100644
--- a/test/clojure/test_clojure/pprint/test_cl_format.clj
+++ b/test/clojure/test_clojure/pprint/test_cl_format.clj
@@ -210,6 +210,10 @@
   (cl-format nil "~3f" -1) "-1."
   (cl-format nil "~4f" -1) "-1.0"
   (cl-format nil "~8f" -1) "    -1.0"
+  (cl-format nil "~12,10f" 1.23456789014) "1.2345678901"
+  (cl-format nil "~12,10f" 1.23456789016) "1.2345678902"
+  (cl-format nil "~13,10f" -1.23456789014) "-1.2345678901"
+  (cl-format nil "~13,10f" -1.23456789016) "-1.2345678902"
   (cl-format nil "~1,1f" 0.1) ".1")
 
 (simple-tests ampersand-tests
-- 
1.7.9.2

